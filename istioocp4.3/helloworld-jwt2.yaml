apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
        version: v1
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      containers:
      - name: auth
        image: wardviaene/http-echo
        env:
        - name: TEXT
          value: this is the authentication service
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        ports:
        - name: http
          containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: auth
  labels:
    app: auth
spec:
  selector:
    app: auth
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
### 
### helloworld.yaml deployments, including a serviceaccount
### for the hello deployment and the world deployment
###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello
  template:
    metadata:
      labels:
        app: hello
        version: v1
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      containers:
      - name: hello
        image: wardviaene/http-echo
        env:
        - name: TEXT
          value: hello jwt application service needs authentication
        - name: NEXT
          value: "world:8080"
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        ports:
        - name: http
          containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: hello
  labels:
    app: hello
spec:
  selector:
    app: hello
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: world
spec:
  replicas: 1
  selector:
    matchLabels:
      app: world
  template:
    metadata:
      labels:
        app: world
        version: v1
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      containers:
      - name: world
        image: wardviaene/http-echo
        env:
        - name: TEXT
          value: world
        - name: NEXT
          value: "world-2:8080"
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        ports:
        - name: http
          containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: world
  labels:
    app: world
spec:
  selector:
    app: world
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: world-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: world-2
  template:
    metadata:
      labels:
        app: world-2
        version: v1
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      containers:
      - name: world-2
        image: wardviaene/http-echo
        env:
        - name: TEXT
          value: "!!!" 
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        ports:
        - name: http
          containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: world-2
  labels:
    app: world-2
spec:
  selector:
    app: world-2
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: helloworld-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "enable-mtls-dr"
  namespace: "default" # even though we specify a namespace, this rule applies to all namespaces
spec:
  exportTo: []
  host: "*.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "api-serve-dr"
spec:
  host: "kubernetes.default.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: DISABLE
---
#apiVersion: networking.istio.io/v1alpha3
#kind: DestinationRule 
#metadata:        
#  name: helloworld-dr    
#spec:            
#  host: hello.istiodemo.svc.cluster.local
#  # uncomment to enable mutual TLS
#  trafficPolicy:
#    tls:         
#      mode: ISTIO_MUTUAL
#  subsets:       
#  - name: v1     
#    labels:      
#      version: v1
#---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: helloworld-vs
spec:
  hosts:
  - "*"   #- "hello-rbac.example.com"
  gateways:
  - helloworld-gateway
  http:
  - match:
    - uri:
        prefix: /hellorohit
    route:
    - destination:
        host: hello.istiodemo.svc.cluster.local
        #subset: v1
        port:
          number: 8080
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: helloauth-vs
spec:
  hosts:
  - "*"  #- "istio-ingressgateway-istio-system.container-crush-01-4044f3a4e314f4bcb433696c70d13be9-0000.che01.containers.appdomain.cloud" #- "auth.kubernetes.newtect.academy"
  gateways:
  - helloworld-gateway
  http:
  - route:
    - destination:
        host: auth.istiodemo.svc.cluster.local
        port:
          number: 8080
